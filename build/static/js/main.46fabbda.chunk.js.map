{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/GetGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","setTimeout","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"8KAgCeA,EA7BY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAwBO,QAKxC,SACE,uBACEC,KAAK,OACLC,MAAOT,EACPU,SAhBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,SCMZG,EAVK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAE5B,OACE,sBAAKC,UAAU,2BAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,wBCRGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UACpDF,GAFmB,+DAIFG,MAAMR,GAJJ,cAIfS,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAXhB,kBAcdY,GAdc,4CAAH,sDC0BLM,EAvBM,SAACb,GAAc,IAAD,EACPpB,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAoBjC,OAdAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAAAT,GAEnBU,YAAW,WACPH,EAAS,CACLV,KAAKG,EACLK,SAAS,MAEf,UAIL,CAACd,IAEGe,GCAMK,EAjBQ,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,EAEXa,EAAab,GAA/BW,EAF6B,EAElCL,KAAYQ,EAFsB,EAEtBA,QAEjB,OACE,qCACE,6BAAKd,IACJc,GAAU,2CACX,qBAAKlB,UAAU,YAAf,SACGe,EAAOH,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCMxBW,EAjBM,WAAO,IAAD,EACWzC,mBAAS,CAAC,cADrB,mBAClB0C,EADkB,KACN3C,EADM,KAGzB,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG2C,EAAWd,KAAI,SAACR,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCV1BuB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,U","file":"static/js/main.46fabbda.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((cat) => [inputValue,...cat]);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      ></input>\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n\nexport default AddCategory;\n","import React from \"react\";\nimport '../index.css'\n\nconst GifGridItem = ({ title, url }) => {\n\n  return (\n    <div className=\"card animate__zoomInDown\">\n      <img src={url} alt={title}></img>\n      <p>{title}</p>\n    </div>\n  )\n};\n\nexport default GifGridItem;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=NfHrr5IahGXW1yDeZ4BgGWiagIuyGZrH`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import { useEffect,useState } from \"react\";\nimport { getGifs } from \"../helpers/GetGifs\";\n\nconst useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then(img =>{\n        \n        setTimeout(() => {\n            setstate({\n                data:img,\n                loading: false\n            });\n        },1000)\n        \n      \n    });\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import React, { useState, useEffect } from \"react\";\nimport GifGridItem from \"./GifGridItem\";\nimport \"../index.css\";\nimport { getGifs } from \"../helpers/GetGifs\";\nimport useFetchGifs from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n\nconst {data:images,loading} = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading&& <p>Cargando..</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => {\n          return <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { getElementError } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One punch\"]);\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr></hr>\n      <ol>\n        {categories.map((category) => (\n            <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}